'''
* 리스트의 내부 요소 다루기
- 리스트는 시퀀스 자료형이기 때문에 인덱스를 통한
요소들의 관리가 가능합니다.
- 리스트를 다룰 때는 문자열과 비슷한 방식을 사용합니다.
'''

foods = ['짜장면', '탕수육', '삼겹살', '족발', '피자']

print(foods[2]) # 삼겹살
print(foods[1][2]) # 더블인덱싱도 가능 -> 1번 인덱스의 2번 인덱스 -> 육
print(foods[0][:2]) # 슬라이싱 가능 -> 0번 인덱스의 항목을 2번 미만까지 슬라이스 -> 짜장

# 리스트 슬라이싱 : 슬라이싱된 새로운 리스트가 반환됩니다.
# 작성방법: 리스트데이터[begin:end:step]
nums = [0,1,2,3,4,5,6,7,8,9]
print(nums[2:5:1]) # [2,3,4]
print(nums[:4]) # [0, 1, 2, 3]
print(nums[1:7:2]) # [1,3,5]

# 리스트는 인덱싱을 사용하여 변수처럼 내부의 값을 변경하는 것이 자유롭습니다.
nums = [0,1,2,3,4,5,6,7,8,9]
print(nums) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

nums[2] = 9999
print(nums) # [0, 1, 9999, 3, 4, 5, 6, 7, 8, 9]

nums[5] = nums[2]
print(nums) # [0, 1, 9999, 3, 4, 9999, 6, 7, 8, 9]


'''
- 문자열은 상수 형태로 저장되는 고정형 리스트입니다.
- 따라서 인덱싱이나, 슬라이싱을 통해 값의 복사본을 활용하는 것은
가능하지만, 영역에 직접 접근해서 내부의 값을 편집할 수는 없습니다.
- 문자열은 변경이 불가능한 자료형입니다. (immutable)
'''
s = 'python'
# s[2] = 'x' 문자열은 대입연산이 불가하다! immutable
print(s[2])


'''
unpackaging: 리스트 내부의 요소를 각의 변수에 저장
좌항의 변수 갯수와 우항의 리스트 요소의 갯수가 일치한다면
자동으로 변수에 리스트 내부 요소의 값들이 차례대로 할당됩니다.
자바스크립트의 객체 디스트럭처링(구조분해할당)과 유사
'''

foods = ['짜장면', '탕수육', '삼겹살', '족발', '피자']

# 리스트의 데이터를 각각 다른 변수에 담고 싶다면?
f1, f2, f3, f4, f5 = foods
print(f1) # 짜장면


# 빈 리스트 만들기
list1 = []

list2 = list() # 빌트인 내장함수 사용 

list2 = list()