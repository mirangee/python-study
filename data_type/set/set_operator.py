'''
* 집합의 연산 메서드
1. 합집합(|): 두 집합의 전체 요소들의 모음 (중복 제거) 
  -> union(), update()
  예) a.update(b, c, d) 여러개 값을 줄 수 있다.

2. 교집합(&): 두 집합의 중복을 배제한 공통 요소들의 모음. -> intersection()
3. 차집합(-): 왼쪽 집합에서 오른쪽 집합 요소를 제거 -> difference()
4. 배타적 차집합(^): 합집합 - 교집합 -> symmetric_difference_update()
5. 부분집합 (<=): 왼쪽 집합이 오른쪽 집합의 부분집합인지를 검사. -> issubset()

메서드를 직접 작성할 수도 있지만 기호로 사용하는 것이 더 간편합니다.
이 집합 연산은 대체 언제 사용할까요?
다른 타입을 집합으로 변환하여 이 집합 연산을 사용하면 데이터 가공이 쉬워집니다.
'''

A = {2, 4, 6, 8, 10, 12}
B = {3, 6, 9, 12, 15}

print('교집합:', A & B) # {12, 6}
print('합집합:', A | B) # {2, 3, 4, 6, 8, 9, 10, 12, 15}
print('차집합(A-B):', A - B) # {8, 2, 10, 4}
print('차집합(B-A):', B - A) # {9, 3, 15}
print('배타적 차집합:', A ^ B) # {2, 3, 4, 8, 9, 10, 15}

C = {4, 8, 12}
print(C <= A) # True
print(C <= B) # False